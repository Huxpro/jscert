############################################################################
# You can define your own path to COQBIN by creating a file called
# "settings.sh" and placing the right definitions into it, e.g.
#    COQBIN=/var/tmp/charguer/v8.4/bin/
#
# The same applies for the path to tlc, e.g.: TLC=~/tlc/trunk
#
# Note that TLC should have no leading slash, whereas COQBIN should have one.
# Note that if you rebind COQBIN you need to do the same in the TLC folder.
# Note that if you add a settings.sh file, you need to do "make clean" first.

# Default paths for TLC and COQBIN are as follows:

COQBIN=
TLC=tlc 
FLOCQ=flocq
FLOCQ_INC=-R $(FLOCQ)/src Flocq

# Alternative definition for FLOCQ_INC: 
# FLOCQ_FOLDERS=$(addprefix $(FLOCQ)/src/,Core Calc Appli Prop)
# FLOCQ_INC=$(addprefix -I ,$(FLOCQ_FOLDERS))

# Edit settings.sh to modify the default paths mentioned above
-include settings.sh

#######################################################

TLC_SRC=$(wildcard $(TLC)/*.v)
TLC_VO=$(TLC_SRC:.v=.vo)

FLOCQ_SRC=$(wildcard $(FLOCQ)/src/*/*.v)
FLOCQ_VO=$(FLOCQ_SRC:.v=.vo)

#######################################################

INCLUDES=-I coq -I $(TLC) $(FLOCQ_INC) 
COQC=$(COQBIN)coqc $(INCLUDES)
COQDEP=$(COQBIN)coqdep $(INCLUDES)
OCAMLOPT=ocamlopt

#######################################################
# MAIN SOURCE FILES

# TODO: rename coq into jscoq

JS_SRC=\
	coq/Shared.v \
	coq/JsNumber.v \
	coq/JsSyntax.v \
	coq/JsSyntaxAux.v \
	coq/JsSyntaxInfos.v \
	coq/JsPreliminary.v \
	coq/JsPreliminaryAux.v \
	coq/JsPrettyInterm.v \
	coq/JsPrettyIntermAux.v \
	coq/JsInit.v \
	coq/JsPrettyRules.v \
	coq/JsCorrectness.v \
	coq/JsInterpreter.v \
    coq/JsInterpreterExtraction.v

JS_VO=$(JS_SRC:.v=.vo)


#######################################################
# EXTENSIONS

.PHONY: all depend clean
.SUFFIXES: .v .vo

#######################################################
# MAIN TARGETS

all: $(JS_VO) interpreter

tlc: $(TLC_VO)

flocq: $(FLOCQ_VO)

tags: $(JS_SRC)
	./gentags.sh


#######################################################
# EXTERNAL LIBRARIES: TLC and Flocq

init:
	cd ../../../; git submodule init; git submodule update 
	svn checkout -r 214 svn://scm.gforge.inria.fr/svn/tlc/branches/v3.1 tlc
	tar -xzf flocq-2.1.0.tar.gz 
	mv flocq-2.1.0 flocq
	chmod +x interp/run.sh
	mkdir interp/src/extract

# alternative: pull git from svn
#	git clone https://gforge.inria.fr/git/flocq/flocq.git flocq


#######################################################

.v.vo : .depend
	$(COQC) -dont-load-proofs -I coq -I $(TLC) $<

coq/JsInterpreterExtraction.vo: coq/JsInterpreterExtraction.v
	$(COQC) -I coq -I $(TLC) $< # The option [-dont-load-proof] would extract all instance to an axiom! -- Martin.
	mv *.ml{,i} interp/src/extract/
	# As there is a second generation f dependancies, you may need to re-call `make' another time to get full compilation working.
	ocamldep -I interp/src/extract/ interp/src/extract/*.ml{,i} >> .depend


#######################################################
# INTERPRETER

run_tests: interpreter
	interp/run.sh -init
	find tests/ -type f -name \*.js -exec interp/run.sh -makefile {} \;

interpreter: interp/run_js

interp/src/extract/%.ml: coq/JsInterpreterExtraction.vo
	# The following line are here only temporary.  It just replaces all [raise Not_found] generated by Coq by an [assert false], which is much easier to use for debuging purpose. -- Martin.
	sed -i -e 's/raise Not_found/assert false/g' $@

interp/src/extract/%.mli: coq/JsInterpreterExtraction.vo

PARSER_INC=-I $(shell ocamlfind query xml-light) -I interp/src -I interp/src/extract

interp/src/parser_syntax.cmx: interp/parser/src/parser_syntax.ml
	$(OCAMLOPT) -c -o $@ $<

interp/src/pretty_print.cmx: interp/parser/src/pretty_print.ml interp/src/parser_syntax.cmx
	$(OCAMLOPT) $(PARSER_INC) -c -o $@ $<

interp/src/parser.cmx: interp/parser/src/parser.ml interp/src/parser_syntax.cmx
	$(OCAMLOPT) $(PARSER_INC) -c -o $@ str.cmxa $<

interp/src/parser_main.cmx: interp/parser/src/parser_main.ml interp/src/parser_main.cmi interp/src/parser.cmx interp/src/pretty_print.cmx
	$(OCAMLOPT) $(PARSER_INC) -c -o $@ $<

interp/src/parser_main.cmi: interp/src/parser_main.mli
	$(OCAMLOPT) $(PARSER_INC) -c -o $@ $<

interp/src/extract/%.cmi: interp/src/extract/%.mli
	$(OCAMLOPT) -c -I interp/src -I interp/src/extract -o $@ $<

interp/src/extract/%.cmx: interp/src/extract/%.ml interp/src/extract/%.cmi
	$(OCAMLOPT) -c -w -20 -I interp/src -I interp/src/extract -o $@ $<

interp/src/translate_syntax.cmi: interp/src/translate_syntax.mli interp/src/extract/JsSyntax.cmi
	$(OCAMLOPT) -c -I interp/src -I interp/src/extract -o $@ $<

interp/src/translate_syntax.cmx: interp/src/translate_syntax.ml interp/src/translate_syntax.cmi interp/src/extract/JsSyntax.cmx
	$(OCAMLOPT) -c -I interp/src -I interp/src/extract -o $@ $<

interp/src/prheap.cmi: interp/src/prheap.mli interp/src/extract/JsSyntax.cmi
	$(OCAMLOPT) -c -I interp/src -I interp/src/extract -o $@ $<

interp/src/prheap.cmx: interp/src/prheap.ml interp/src/extract/JsSyntax.cmx interp/src/prheap.cmi
	$(OCAMLOPT) -c -I interp/src -I interp/src/extract -o $@ $<

interp/run_js: \
	interp/src/extract/Bool0.cmx interp/src/extract/LibReflect.cmx interp/src/extract/String0.cmx interp/src/extract/LibString.cmx interp/src/extract/Datatypes.cmx \
	interp/src/extract/OrdersTac.cmx interp/src/extract/GenericMinMax.cmx \
	interp/src/extract/Peano.cmx interp/src/extract/BinPos.cmx interp/src/extract/BinNat.cmx interp/src/extract/BinInt.cmx \
	interp/src/extract/LibInt.cmx interp/src/extract/LibOption.cmx interp/src/extract/LibNat.cmx interp/src/extract/LibList.cmx interp/src/extract/List0.cmx \
	interp/src/extract/LibBool.cmx interp/src/extract/LibHeap.cmx \
	interp/src/extract/Zbool.cmx interp/src/extract/Fappli_IEEE.cmx interp/src/extract/Fappli_IEEE_bits.cmx interp/src/extract/Shared.cmx interp/src/extract/JsNumber.cmx \
	interp/src/extract/JsSyntax.cmx interp/src/extract/JsSyntaxAux.cmx interp/src/extract/JsSyntaxInfos.cmx \
	interp/src/pretty_print.cmx interp/src/parser_syntax.cmx interp/src/parser.cmx interp/src/parser_main.cmx interp/src/translate_syntax.cmx \
	interp/src/extract/JsPreliminary.cmx interp/src/extract/JsPreliminaryAux.cmx \
	interp/src/extract/JsInit.cmx interp/src/extract/JsInterpreter.cmx \
	interp/src/prheap.cmx interp/src/run_js.ml
	# Do not reorder the hypothesis (unless you really know what you are doing).
	$(OCAMLOPT) $(PARSER_INC) -o $@ xml-light.cmxa unix.cmxa str.cmxa $^


#######################################################
# DEPENDENCIES

DEPS=$(JS_SRC) $(TLC_SRC) $(FLOCQ_SRC)

depend: .depend

.depend : $(DEPS) Makefile
	$(COQDEP) $(DEPS) > .depend
	ocamldep -I interp/src/extract/ interp/src/extract/*.ml{,i} >> .depend

ifeq ($(findstring $(MAKECMDGOALS),init depend clean clean_all),)
include .depend
endif


#######################################################
# CLEAN

clean:
	bash -c "rm -f coq/*.{vo,deps,dot,glob,ml,mli,cmi,cmx}" || echo ok
	bash -c "rm -f .depend" || echo ok
	bash -c "rm -f interp/src/*.{cmi,cmx}" || echo ok
	bash -c "rm -f interp/src/extract/*.{ml,mli,cmi,cmx}" || echo ok
	bash -c "rm -f interp/run_js" || echo ok

clean_all: clean
	find . -iname "*.vo" -exec rm {} \;
	find . -iname "*.glob" -exec rm {} \;


#######################################################
# LOCAL: copy all flocq and tlc .vo files to the head folder

local:
	@$(foreach file, $(FLOCQ_VO), cp $(file) $(notdir $(file));)
	@$(foreach file, $(TLC_VO), cp $(file) $(notdir $(file));)

